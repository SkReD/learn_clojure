(start-repl)
quit
(cell= (map vector (cycle ["#eee" "#fff"]) [1 2 3]))
(start-repl)
(cell= (map vector (cycle ["#eee" "#fff"]) [1 2 3]))
(start-repl)
 (cell= (get-in state [:croses) (partial swap! c assoc-in path))
game.logic/board
(game.logic/board)
(@game.logic/board)
`game.logic/board
game.logic/board
(start-repl)
(cell=)
(cell= ())
(cell= (constantly 1))
(hoplon.javelin/cell= (constantly 1))
(ns)
(game.logic/board)
(load game/logic.cljs)
(load src/game/logic.cljs)
(load game.logic)
(ns game.logic)
(board)
uit
quit
(start-repl)
@game.logic/board
(start-repl)
@game.logic/board
@game.logic/board2
@game.logic/board
(start-repl)
@game.logic/board
(swap! game.logic/board conj `(0 0 0))
(!swap game.logic/board assoc :0 `(1 2 3))
(!swap game.logic/board `(`(1 2 3)))
(!reset game.logic/board `(`(1 2 3)))
(!reset game.logic/board ((1 2 3)))
(!reset game.logic/board `(`(1 2 3)))
(get game.logic/board 0)
(game.logic/set-cross game.logic/board 0 0)
(game.logic/board)
(print game.logic/board)
(game.logic/set-cross game.logic/board 0 0)
(print game.logic/board)
(game.logic/set-cross game.logic/board 0 0)
(nth game.logic/board 0)
(nth (nth game.logic/board 0) 0)
(game.logic/set-cross game.logic/board 0 0)
(macroexpand-1 game.logic/set-cross)
(game.logic/set-cross game.logic/board 0 0)
(reset)
(game.logic/set-cross game.logic/board 0 0)
(reset! (nth (nth game.logic/board 0) 0) (mark-type signs))
(reset! (nth (nth game.logic/board 0) 0) (:cross signs))
(print game.logic/board)
(reset! (nth (nth game.logic/board 0) 0) (:cross game.logic/signs))
(print game.logic/board)
(print @game.logic/board)
(start-rep;)
(start-repl)
(print game.logic/board)
(game.logic/set-cross game.logic/board 0 0 )
(game.logic/set-cross game.logic/board 0 2 )
(game.logic/set-zero game.logic/board 0 2 )
(game.logic/get-mark game.logic/board 0 2 )
(deref game.logic/get-mark game.logic/board 0 2)
(deref (game.logic/get-mark game.logic/board 0 2))
(game.logic/set-zero game.logic/board 0 2 )
(game.logic/get-mark game.logic/board 0 2 )
(game.logic/set-zero game.logic/board 0 2 )
(game.logic/board)
(print game.logic/board)
(game.logic/board)
(print game.logic/board)
