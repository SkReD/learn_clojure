<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459284484616">{:repl-history {:ide [], :local [&quot;(main)&quot; &quot;(state)&quot; &quot;(print state)&quot; &quot;(some-func)&quot; &quot;(ns learn-clojure.game)&quot; &quot;(:crosses state)&quot; &quot;(:crosses @state)&quot; &quot;(def key :crosses)&quot; &quot;(key @state)&quot; &quot;(set-cross 1 1)&quot; &quot;(is-checked (key @state) 1 1)&quot; &quot;(is-checked (:crosses @state) 1 1)&quot; &quot;@state&quot; &quot;(set-mark :crosses 1 3)&quot; &quot;(set-mark :crosses 1 4)&quot; &quot;(set-mark :crosses 1 2)&quot; &quot;(set-zero 1 2)&quot; &quot;(set-cross 1 2)&quot; &quot;(set-cross 2 1\n\t\t\t\t\t )&quot; &quot;(get-board @state 3)&quot; &quot;(ns learn-clojure.ui)&quot; &quot;(ns cross-zeros.game)&quot; &quot;(get-board)&quot; &quot;(load-file \&quot;core.clj\&quot;)&quot; &quot;(load-file \&quot;src/core.clj\&quot;)&quot; &quot;(load-file \&quot;src/game.clj\&quot;)&quot; &quot;(load-file \&quot;src/ui.clj\&quot;)&quot; &quot;'(seesaw/invoke-later)&quot; &quot;(seesaw/invoke-later)&quot; &quot;(invoke-later)&quot; &quot;'(invoke-later)&quot; &quot;macroexpand '(invoke-later)&quot; &quot;macroexpand '(invoke-later (1 2 3))&quot; &quot;(invoke-later (1 2 3))&quot; &quot;(invoke-later ((print) (print)))&quot; &quot;(invoke-later ((print 1) (print 2)))&quot; &quot;(invoke-later ('(print 1) '(print 2)))&quot; &quot;(invoke-later (`(print 1) `(print 2)))&quot; &quot;(-&gt; (frame :title \&quot;Hello\&quot;,\n\t\t\t\t\t :content \&quot;Hello, Seesaw\&quot;,\n\t\t\t\t\t :on-close :exit)\n\t\tpack!\n\t\tshow!)&quot; &quot;(invoke-later\n\t(-&gt; (frame :title \&quot;Hello\&quot;,\n\t\t\t\t\t\t :content \&quot;Hello, Seesaw\&quot;,\n\t\t\t\t\t\t :on-close :exit)\n\t\t\tpack!\n\t\t\tshow!))&quot; &quot;(ns cross-zeros.ui\n\t(:use seesaw.core))&quot; &quot;(seesaw.core/invoke-later\n\t(-&gt; (frame :title \&quot;Hello\&quot;,\n\t\t\t\t\t\t :content \&quot;Hello, Seesaw\&quot;,\n\t\t\t\t\t\t :on-close :exit)\n\t\t\tpack!\n\t\t\tshow!))&quot; &quot;(ns)&quot; &quot;(-main)&quot; &quot;(game/get-board @state 3\n\t\t\t\t\t\t\t\t)&quot; &quot;(game/get-board @game/state 3)&quot; &quot;(ui/show-window)&quot; &quot;(ui/get-grid-table)&quot; &quot;(ui/get-grid-table-row (get (game/get-board) 1))&quot; &quot;(get (game/get-board) 1)&quot; &quot;((game/get-board) 1)&quot; &quot;(range 0 size)&quot; &quot;(range 0 3\n\t\t\t )&quot; &quot;[0 3]&quot; &quot;[range 0 3]&quot; &quot;[(range 0 3)]&quot; &quot;[0..3]&quot; &quot;'(game/get-board)&quot; &quot;(game/get-board)&quot; &quot;(map\n\t(game/get-board)\n\t(fn [row] (get-grid-table-row row))&quot; &quot;(map\n\t(game/get-board)\n\t(fn [row] (get-grid-table-row row)))&quot; &quot;(map\n\t(game/get-board)\n\t(1))&quot; &quot;(map\n\t(game/get-board)\n\t#(1))&quot; &quot;(map\n\t#(1)\n\t(game/get-board))&quot; &quot;(map\n\t#(%)\n\t(game/get-board))&quot; &quot;|&quot; &quot;(get-grid-table)&quot; &quot;(cross-zeros.ui/show-window)&quot; &quot;(lein run)&quot; &quot;(lein)&quot; &quot;(ns cross-zeros.ui)&quot; &quot;(show-window)&quot; &quot;(require 'cljs.repl)&quot; &quot;(require 'cljs.repl.browser)&quot; &quot;(cljs.repl/repl (cljs.repl.browser/repl-env))&quot;], :remote []}}</component>
</project>